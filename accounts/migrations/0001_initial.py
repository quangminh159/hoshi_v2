# Generated by Django 5.0.1 on 2025-03-14 11:33

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import imagekit.models.fields
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, unique=True, verbose_name='phone number')),
                ('avatar', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to='avatars')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='bio')),
                ('website', models.URLField(blank=True, verbose_name='website')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='birth date')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=10, verbose_name='gender')),
                ('is_private', models.BooleanField(default=False, verbose_name='private account')),
                ('is_verified', models.BooleanField(default=False, verbose_name='verified account')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('facebook', models.URLField(blank=True, verbose_name='facebook')),
                ('twitter', models.URLField(blank=True, verbose_name='twitter')),
                ('instagram', models.URLField(blank=True, verbose_name='instagram')),
                ('linkedin', models.URLField(blank=True, verbose_name='linkedin')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='push notifications')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='email notifications')),
                ('like_notifications', models.BooleanField(default=True, verbose_name='like notifications')),
                ('comment_notifications', models.BooleanField(default=True, verbose_name='comment notifications')),
                ('follow_notifications', models.BooleanField(default=True, verbose_name='follow notifications')),
                ('mention_notifications', models.BooleanField(default=True, verbose_name='mention notifications')),
                ('private_account', models.BooleanField(default=False, verbose_name='private account')),
                ('hide_activity', models.BooleanField(default=False, verbose_name='hide activity status')),
                ('block_messages', models.BooleanField(default=False, verbose_name='block messages from non-followers')),
                ('two_factor_auth', models.BooleanField(default=False, verbose_name='two-factor authentication')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DataDownloadRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Đang xử lý'), ('ready', 'Sẵn sàng tải xuống'), ('expired', 'Đã hết hạn')], default='pending', max_length=20)),
                ('include_media', models.BooleanField(default=False)),
                ('file_path', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(max_length=255, unique=True)),
                ('device_type', models.CharField(max_length=50)),
                ('device_name', models.CharField(max_length=255)),
                ('browser', models.CharField(max_length=100)),
                ('os', models.CharField(max_length=100)),
                ('ip_address', models.GenericIPAddressField()),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_current', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_active'],
            },
        ),
        migrations.CreateModel(
            name='UserFollowing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('following_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers_relationships', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_relationships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'following',
                'verbose_name_plural': 'followings',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'following_user')},
            },
        ),
        migrations.AddField(
            model_name='user',
            name='followers',
            field=models.ManyToManyField(related_name='following', through='accounts.UserFollowing', to=settings.AUTH_USER_MODEL),
        ),
    ]
